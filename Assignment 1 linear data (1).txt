console.clear()

//===============================================Que. (1)=====================================================

//Delete the elements in an linked list whose sum is equal to zero

// Input: head = [1,2,-3,3,1]
// Output: [3,1]

// Input: head = [1,2,3,-3,4]
// Output: [1,2,4]

// Input: head = [1,2,3,-3,-2]
// Output: [1]

var removeZeroSumSublists = function (head) {
  let newList = new ListNode(0);
  newList.next = head;
  let current = newList;
  while (current !== null) {
    let sum = 0;
    while (head !== null) {
      sum += head.val;
      if (sum === 0) {
        current.next = head.next;
      }
      head = head.next;
    }
    current = current.next;
    if (current !== null) {
      head = current.next;
    }
  }

  return newList.next;
};


//=====================================================Que. (2) =================================================

// Reverse a linked list in groups of given size

// Javascript program to reverse a
// linked list in groups of
// given size
var head; // head of list

	/* Linked list Node */
	class Node {
			constructor(val) {
				this.data = val;
				this.next = null;
			}
		}

	function reverse(head , k) {
		if (head == null)
			return null;
		var current = head;
		var next = null;
		var prev = null;

		var count = 0;

		/* Reverse first k nodes of linked list */
		while (count < k && current != null) {
			next = current.next;
			current.next = prev;
			prev = current;
			current = next;
			count++;
		}

		/*
		next is now a pointer to (k+1)th node
		Recursively call for the list starting
		from current. And make rest of the list
		as next of first node
		*/
		if (next != null)
			head.next = reverse(next, k);

		// prev is now head of input list
		return prev;
	}

	/* Utility functions */

	/* Inserts a new Node at front of the list. */
	function push(new_data) {
		/*
		1 & 2: Allocate the Node & Put in the data
		*/
		new_node = new Node(new_data);

		/* 3. Make next of new Node as head */
		new_node.next = head;

		/* 4. Move the head to point to new Node */
		head = new_node;
	}

	/* Function to print linked list */
	function printList() {
		temp = head;
		while (temp != null) {
			document.write(temp.data + " ");
			temp = temp.next;
		}
		document.write("<br/>");
	}

	/* Driver program to test above functions */
	
		
		/*
		Constructed Linked List is
		1->2->3->4->5->6-> 7->8->8->9->null
		*/
		push(9);
		push(8);
		push(7);
		push(6);
		push(5);
		push(4);
		push(3);
		push(2);
		push(1);

		document.write("Given Linked List<br/>");
		printList();

		head = reverse(head, 3);

		document.write("Reversed list<br/>");
		printList();

// =================================================== Que (3) ======================================================

// Merge a linked list into another linked list at alternate positions.

// Javascript program to merge a linked list into another at
// alternate positions
 
// A nexted list node
class Node
  {
    constructor()
    {
        this.data = 0;
        this.next = null;
    }
};
 
/* Function to insert a node at the beginning */
function push(head_ref, new_data)
{
    var new_node = new Node();
    new_node.data = new_data;
    new_node.next = (head_ref);
    (head_ref) = new_node;
    return head_ref;
 
}
 
/* Utility function to print a singly linked list */
function printList(head)
{
    var temp = head;
    while (temp != null)
    {
        document.write( temp.data + " ");
        temp = temp.next;
    }
    document.write("<br>");
}
 
// Main function that inserts nodes of linked list q into p at
// alternate positions. Since head of first list never changes
// and head of second list may change, we need single pointer
// for first list and double pointer for second list.
function merge(p, q)
{
    var p_curr = p, q_curr = q;
    var p_next, q_next;
 
    // While there are available positions in p
    while (p_curr != null &&  q_curr != null)
    {
        // Save next pointers
        p_next = p_curr.next;
        q_next = q_curr.next;
 
        // Make q_curr as next of p_curr
        q_curr.next = p_next; // Change next pointer of q_curr
        p_curr.next = q_curr; // Change next pointer of p_curr
 
        // Update current pointers for next iteration
        p_curr = p_next;
        q_curr = q_next;
    }
 
    q = q_curr; // Update head pointer of second list
    return q;
}
 
// Driver code
var p = null, q = null;
p = push(p, 3);
p = push(p, 2);
p = push(p, 1);
document.write( "First Linked List:<br>");
printList(p);
q = push(q, 8);
q = push(q, 7);
q = push(q, 6);
q = push(q, 5);
q = push(q, 4);
document.write( "Second Linked List:<br>");
printList(q);
q = merge(p, q);
document.write( "Modified First Linked List:<br>");
printList(p);
document.write( "Modified Second Linked List:<br>");
printList(q);

// ============================================== Que (4) ============================================================

// In an array, Count Pairs with given sum
// Javascript implementation of simple method to find count of
// pairs with given sum.
// Returns number of pairs in arr[0..n-1] with sum equal
// to 'sum'
function getPairsCount(arr, n, sum)
{
	let count = 0; // Initialize result

	// Consider all possible pairs and check their sums
	for (let i = 0; i < n; i++)
		for (let j = i + 1; j < n; j++)
			if (arr[i] + arr[j] == sum)
				count++;

	return count;
}

// Driver function to test the above function
	let arr = [ 1, 5, 7, -1, 5 ];
	let n = arr.length;
	let sum = 6;
	document.write("Count of pairs is "
		+ getPairsCount(arr, n, sum));
	
// ============================================== Que (5) ======================================================

// Find duplicates in an array

const arry = [1, 2, 1, 3, 4, 3, 5];

const toFindDuplicates = arry => arry.filter((item, index) => arr.indexOf(item) !== index)
const duplicateElementa = tofindDuplicates(arry);
console.log(duplicateElements);

// ============================================== Que (6) ======================================================

// Find the Kth largest and Kth smallest number in an array

function kthSmallest(arr, n, k)
{
    // Sort the given array
    arr.sort((a,b) => a-b);
 
    // Return k'th element in the sorted array
    return arr[k - 1];
}
 
// Driver program to test above methods
    let arr = [ 12, 3, 5, 7, 19 ];
    let n = arr.length, k = 2;
    document.write("K'th smallest element is " + kthSmallest(arr, n, k));

// ============================================== Que (7) ======================================================

// Move all the negative elements to one side of the array

function rearrange(arr, n)
{
    let j = 0;
    for (let i = 0; i < n; i++) {
        if (arr[i] < 0) {
            if (i != j){
                let temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
            j++;
        }
    }
}
 
// A utility function to print an array
function printArray(arr, n)
{
    for (let i = 0; i < n; i++)
        document.write(arr[i] + " ");
}
 
// Driver code
    let arr = [ -1, 2, -3, 4, 5, 6, -7, 8, 9 ];
    let n = arr.length;
    rearrange(arr, n);
    printArray(arr, n);

// ============================================== Que (8) ======================================================

// Reverse a string using a stack data structure

class Stack {
 
    constructor(){  
        this.elements = []; 
    }    push(element){ 
        this.elements.push(element) 
    }    pop(){ 
        if(this.elements.length === 0) return "Underflow situation"; 
        else return this.elements.pop();
    }    isEmpty(){ 
        if(this.elements.length > 0) return false;
        else return true;
    }
  
  function reverse(str){     //Creates a new stack
     let stack = new Stack();
      
     let i = 0;
     let reversedStr = "";     //Adds all the characters to the stack.
     while (i !== str.length) {
         stack.push(str.charAt(i));
         i++;
     }
   
     //Creates a reversed string by popping the stack.
     while (!stack.isEmpty()) {
         reversedStr += stack.pop();
     }     //returns the reversed string.
     return reversedStr;}


// ============================================== Que (9) ======================================================
  
// Evaluate a postfix expression using stack

  
// Javascript program to evaluate value of a postfix expression
 
// Method to evaluate value of a postfix expression
function evaluatePostfix(exp)
{
    //create a stack
        let stack=[];
          
        // Scan all characters one by one
        for(let i=0;i<exp.length;i++)
        {
            let c=exp[i];
              
            // If the scanned character is an operand (number here),
            // push it to the stack.
            if(! isNaN( parseInt(c) ))
            stack.push(c.charCodeAt(0) - '0'.charCodeAt(0));
              
            //  If the scanned character is an operator, pop two
            // elements from stack apply the operator
            else
            {
                let val1 = stack.pop();
                let val2 = stack.pop();
                  
                switch(c)
                {
                    case '+':
                    stack.push(val2+val1);
                    break;
                      
                    case '-':
                    stack.push(val2- val1);
                    break;
                      
                    case '/':
                    stack.push(val2/val1);
                    break;
                      
                    case '*':
                    stack.push(val2*val1);
                    break;
              }
            }
        }
        return stack.pop();  
}
  
// ============================================= Que (10) ==========================================================

// Implement a queue using the stack data structure

// Javascript program to implement Queue using 
// two stacks with costly enQueue() 
class Queue{
     
constructor()
{
    this.s1 = [];
    this.s2 = [];
}
 
enQueue(x)
{
     
    // Move all elements from s1 to s2
    while (this.s1.length != 0)
    {
        this.s2.push(this.s1.pop());
        //s1.pop();
    }
 
    // Push item into s1
    this.s1.push(x);
 
    // Push everything back to s1
    while (this.s2.length != 0)
    {
        this.s1.push(this.s2.pop());
        //s2.pop();
    }
}
 
// Dequeue an item from the queue 
deQueue()
{
     
    // If first stack is empty
    if (this.s1.length == 0)
    {
        document.write("Q is Empty");
    }
 
    // Return top of s1
    let x = this.s1[this.s1.length - 1];
    this.s1.pop();
    return x;
}
}
 
// Driver code
let q = new Queue();
q.enQueue(1);
q.enQueue(2);
q.enQueue(3);
 
document.write(q.deQueue() + "<br>");
document.write(q.deQueue() + "<br>");
document.write(q.deQueue() + "<br>");